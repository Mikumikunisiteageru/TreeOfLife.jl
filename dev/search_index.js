var documenterSearchIndex = {"docs":
[{"location":"#TreeOfLife.jl","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"TreeOfLife","category":"page"},{"location":"#TreeOfLife","page":"TreeOfLife.jl","title":"TreeOfLife","text":"TreeOfLife.jl\n\n(Image: Documentation) (Image: Documentation) (Image: CI) (Image: Codecov) (Image: Aqua.jl Quality Assurance)\n\nTreeOfLife.jl defines data types for cladograms and chronograms in phylogenetics and methods analyzing these trees.\n\nIn development. \n\nAlternative packages include:\n\nPhylo.jl (\"in beta\", and its outdated prototype Phylogenetics.jl)\nPhylogenies.jl (\"in development\")\n\nExamples\n\nThe followings are some simple examples illustrating the usage of this package. Please see the documentation for more details of TreeOfLife.jl.\n\njulia> using TreeOfLife\n\njulia> tree = fromnewick(\"(A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\")\nChronoTree(ChronoNode[ChronoNode(\"F\", 0, 0, 2, 0.0, 0.0), ChronoNode(\"A\", 1, 3, 0, 0.1, 0.1), ChronoNode(\"B\", 1, 4, 0, 0.2, 0.2), ChronoNode(\"E\", 1, 0, 5, 0.5, 0.5), ChronoNode(\"C\", 4, 6, 0, 0.8, 0.3), ChronoNode(\"D\", 4, 0, 0, 0.9, 0.4)])\n\njulia> tonewick(tree)\n\"(A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\"\n\njulia> tipnames = gettipnames(tree)\n4-element Vector{String}:\n \"A\"\n \"B\"\n \"C\"\n \"D\"\n\njulia> getmrca(tree, tipnames)\n1\n\njulia> phylodiv(tree, tipnames)\n1.5\n\njulia> ismonophyl(tree, [\"A\", \"B\"])\nfalse\n\njulia> ismonophyl(tree, [\"C\", \"D\"])\ntrue\n\n\n\n\n\n","category":"module"},{"location":"#Types","page":"TreeOfLife.jl","title":"Types","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"AbstractNode\nChronoNode\nCladoNode\nAbstractTree\nChronoTree\nCladoTree\nlength\nempty\n==","category":"page"},{"location":"#TreeOfLife.AbstractNode","page":"TreeOfLife.jl","title":"TreeOfLife.AbstractNode","text":"AbstractNode\n\nAbstract supertype for ChronoNode and CladoNode.\n\n\n\n\n\n","category":"type"},{"location":"#TreeOfLife.ChronoNode","page":"TreeOfLife.jl","title":"TreeOfLife.ChronoNode","text":"ChronoNode <: AbstractNode\n\nType for nodes in a ChronoTree. Compare CladoNode.\n\n\n\n\n\n","category":"type"},{"location":"#TreeOfLife.CladoNode","page":"TreeOfLife.jl","title":"TreeOfLife.CladoNode","text":"CladoNode <: AbstractNode\n\nCladoNode(node::ChronoNode) :: CladoNode\n\nType for nodes in a CladoTree. \n\nA ChronoNode can be converted to a CladoNode by removing all  information about time.\n\n\n\n\n\n","category":"type"},{"location":"#TreeOfLife.AbstractTree","page":"TreeOfLife.jl","title":"TreeOfLife.AbstractTree","text":"AbstractTree\n\nAbstract supertype for ChronoTree and CladoTree.\n\n\n\n\n\n","category":"type"},{"location":"#TreeOfLife.ChronoTree","page":"TreeOfLife.jl","title":"TreeOfLife.ChronoTree","text":"ChronoTree <: AbstractTree\n\nChronoTree() :: ChronoTree\n\nType for chronograms or dated phylogenetic trees, assumed to be rooted,  comprising ChronoNode instances. Compare CladoTree. \n\nWhen called with no arguments, the constructor returns an empty ChronoTree.\n\n\n\n\n\n","category":"type"},{"location":"#TreeOfLife.CladoTree","page":"TreeOfLife.jl","title":"TreeOfLife.CladoTree","text":"CladoTree <: AbstractTree\n\nCladoTree() :: CladoTree\nCladoTree(tree::CladoTree) :: CladoTree\nCladoTree(tree::ChronoTree) :: CladoTree\n\nType for cladograms or undated phylogenetic trees, assumed to be rooted,  comprising CladoNode instances. \n\nWhen called with no arguments, the constructor returns an empty CladoTree.\n\nA ChronoTree can be converted to a CladoTree by removing all  information about time.\n\n\n\n\n\n","category":"type"},{"location":"#Base.length","page":"TreeOfLife.jl","title":"Base.length","text":"length(tree::AbstractTree) :: Int\n\nReturn the number of nodes in a phylogenetic tree.\n\n\n\n\n\n","category":"function"},{"location":"#Base.empty","page":"TreeOfLife.jl","title":"Base.empty","text":"empty(tree::AbstractTree) :: AbstractTree\n\nConstruct a phylogenetic tree with only the root node of the same type.\n\n\n\n\n\n","category":"function"},{"location":"#Base.:==","page":"TreeOfLife.jl","title":"Base.:==","text":"==(node1::CladoNode, node2::CladoNode) :: Bool\n==(node1::ChronoNode, node2::ChronoNode) :: Bool\n\nTest if two nodes are identical, in the sense that they have the same name,  the same parent, sibling, and child, as well as they have approximate branch  lengths.\n\n\n\n\n\n==(tree1::AbstractTree, tree2::AbstractTree) :: Bool\n\nTest if two trees are identical, in the sense that they are of the same type,  isomorphic, and have the same node ordering; specifically, for dated trees or  ChronoTree instances, the node times are correspondingly equal. \n\nIdentical trees are always isomorphic (can be tested by isomorphic).\n\n\n\n\n\n","category":"function"},{"location":"#Newick-format","page":"TreeOfLife.jl","title":"Newick format","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"readnewick\nwritenewick\nfromnewick\ntonewick","category":"page"},{"location":"#TreeOfLife.readnewick","page":"TreeOfLife.jl","title":"TreeOfLife.readnewick","text":"readnewick(filename::AbstractString) :: AbstractTree\n\nRead a phylogenetic tree from disk. Compare writenewick.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.writenewick","page":"TreeOfLife.jl","title":"TreeOfLife.writenewick","text":"readnewick(filename::AbstractString, tree::AbstractTree) :: AbstractTree\n\nWrite a phylogenetic tree to disk. Compare readnewick.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.fromnewick","page":"TreeOfLife.jl","title":"TreeOfLife.fromnewick","text":"fromnewick(str::AbstractString; nocomments::Bool=false) :: AbstractTree\n\nCreate a phylogenetic tree from a Newick-format tree string.\n\nIts inverse function is tonewick.\n\nThe argument nocomments controls whether the comments (enclosed by square  brackets) are wiped out; by default it is set to false, i.e., all comments  are kept.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.tonewick","page":"TreeOfLife.jl","title":"TreeOfLife.tonewick","text":"tonewick(tree::CladoTree) :: String\ntonewick(tree::ChronoTree) :: String\n\nExpress a phylogenetic tree as a Newick-format string.\n\nIts inverse function is fromnewick.\n\n\n\n\n\n","category":"function"},{"location":"#Internal-functions","page":"TreeOfLife.jl","title":"Internal functions","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"TreeOfLife.ignore_comments\nTreeOfLife.from_newick\nTreeOfLife.get_tree_type\nTreeOfLife.to_newick!","category":"page"},{"location":"#TreeOfLife.ignore_comments","page":"TreeOfLife.jl","title":"TreeOfLife.ignore_comments","text":"ignore_comments(str::AbstractString) :: String\n\nRemove comments enclosed by square brackets (possibly nested) in a string.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.from_newick","page":"TreeOfLife.jl","title":"TreeOfLife.from_newick","text":"from_newick(str::AbstractString) :: Vector\n\nParse a Newick-format tree string into segments of different types according  to their syntactical meanings. Used in fromnewick.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.get_tree_type","page":"TreeOfLife.jl","title":"TreeOfLife.get_tree_type","text":"get_tree_type(elements::Vector) :: \n\tTuple{Type{<:AbstractTree}, Type{<:AbstractNode}}\n\nTest whether a vector of elements parsed from some Newick-syntax tree string  is a chronogram or a cladogram. Used in fromnewick.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.to_newick!","page":"TreeOfLife.jl","title":"TreeOfLife.to_newick!","text":"to_newick!(elements::AbstractVector, \n\ttree::CladoTree, i::Integer) :: AbstractVector\nto_newick!(elements::AbstractVector, \n\ttree::ChronoTree, i::Integer) :: AbstractVector\n\nConvert a phylogenetic tree to segments of a Newick-format string. Used in  tonewick.\n\n\n\n\n\n","category":"function"},{"location":"#Nexus-format","page":"TreeOfLife.jl","title":"Nexus format","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"readnexus","category":"page"},{"location":"#TreeOfLife.readnexus","page":"TreeOfLife.jl","title":"TreeOfLife.readnexus","text":"readnexus(filename::AbstractString; every=0) :: Vector{ChronoTree}\n\nRead dated phylogenetic trees from a Nexus-format file on disk. \n\nwarning: Warning\nUnder development; correctness not guaranteed.\n\n\n\n\n\n","category":"function"},{"location":"#Methods-involving-one-tree","page":"TreeOfLife.jl","title":"Methods involving one tree","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"gettips\ngettipnames\nalldistinct\ngetage\ngetages\npreorder\npostorder\nisroot\nistip\ngetname\nhassibling\nrename\nrename!\nsubtree\ngetmrca\nismonophyl\nphylodiv\ncutfromroot\ncutfromtips\nisbinary\ntreehash\nisomorphic\ngetdescs\ngetdescnames","category":"page"},{"location":"#TreeOfLife.gettips","page":"TreeOfLife.jl","title":"TreeOfLife.gettips","text":"gettips(tree::AbstractTree) :: Vector{Int}\n\nReturn the indices of all tip nodes of the tree.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.gettipnames","page":"TreeOfLife.jl","title":"TreeOfLife.gettipnames","text":"gettipnames(tree::AbstractTree) :: Vector{String}\n\nReturn the names of all tip nodes of the tree.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.alldistinct","page":"TreeOfLife.jl","title":"TreeOfLife.alldistinct","text":"alldistinct(tree::AbstractTree) :: Bool\n\nTest if all tip nodes of the tree have distinct names.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.getage","page":"TreeOfLife.jl","title":"TreeOfLife.getage","text":"getage(tree::ChronoTree; \n\taverage=mean_, getrelerr::Bool=false, reltol=1e-8) :: Float64\n\nReturn an average age (from the root node) of tip nodes of the tree. \n\nThe argument average defines the method for summarizing the ages to one; by  default it is set to mean_.\n\nThe argument getrelerr controls whether the relative standard deviation is  appended to the output ((mean, relstd)) or not (only mean); by default it  is set to false.\n\nThe argument reltol is a tolerance of relative error. By default it is set  to 1e-8. To suppress the judgment, set reltol=NaN.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.getages","page":"TreeOfLife.jl","title":"TreeOfLife.getages","text":"getages(tree::ChronoTree; average=mean_, reltol=1e-8) :: Vector{Float64}\n\nReturn ages (from the root node) of all nodes of the tree.\n\nThe argument average defines the method for summarizing the ages to one; by  default it is set to mean_.\n\nThe argument reltol is a tolerance of relative error. By default it is set  to 1e-8. To suppress the judgment, set reltol=NaN.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.preorder","page":"TreeOfLife.jl","title":"TreeOfLife.preorder","text":"preorder(tree::AbstractTree, i=1) :: Vector{Int}\n\nReturn the pre-order traversal sequence of the whole tree, or its subtree  with root node tree[i].\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.postorder","page":"TreeOfLife.jl","title":"TreeOfLife.postorder","text":"postorder(tree::AbstractTree, i=1) :: Vector{Int}\n\nReturn the post-order traversal sequence of the whole tree, or its subtree  with root node tree[i].\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.isroot","page":"TreeOfLife.jl","title":"TreeOfLife.isroot","text":"isroot(tree::AbstractTree, i::Integer) :: Bool\n\nTest if the i-th node of the tree is the root.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.istip","page":"TreeOfLife.jl","title":"TreeOfLife.istip","text":"istip(tree::AbstractTree, i::Integer) :: Bool\n\nTest if the i-th node of the tree is a tip or leaf node.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.getname","page":"TreeOfLife.jl","title":"TreeOfLife.getname","text":"getname(node::AbstractNode) :: String\ngetname(tree::AbstractTree, i::Integer) :: String\n\nExtract the name of the given node as a string.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.hassibling","page":"TreeOfLife.jl","title":"TreeOfLife.hassibling","text":"hassibling(tree::AbstractTree, i::Integer) :: Bool\n\nTest if the i-th node of the tree has following sibling(s).\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.rename","page":"TreeOfLife.jl","title":"TreeOfLife.rename","text":"rename(oldtree::AbstractTree, \n\toldtonew::Dict{<:AbstractString,<:AbstractString}\n\nCreate a new tree whose nodes are respectively renamed from the oldtree by  a mapping from old names to new names. Specifically, nodes with empty names  remain.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.rename!","page":"TreeOfLife.jl","title":"TreeOfLife.rename!","text":"rename!(tree::Tree, \n\toldtonew::Dict{<:AbstractString,<:AbstractString}\n\nRename nodes of the tree in place by a mapping from old names to new names.  Specifically, nodes with empty names remain.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.subtree","page":"TreeOfLife.jl","title":"TreeOfLife.subtree","text":"subtree(oldtree::AbstractTree, tipset; \n\tsimplify::Bool=true, keeproot::Bool=false) :: AbstractTree\n\nExtract the subtree generated from a given set of tips of the tree. \n\nThe argument simplify controls whether internal node with only one child  needs to be reduced, i.e., connecting directly its child and its parent; by  default it is set to true. \n\nThe argument keeproot controls whether the original root node needs to be  contained in the subtree; by default it is set to false, in other words,  yielding a truly minimum spanning tree (MST). \n\nWhen simplify is set to false, the value of keeproot has no effect.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.getmrca","page":"TreeOfLife.jl","title":"TreeOfLife.getmrca","text":"getmrca(tree::AbstractTree, tipset) :: Int\n\nFind the index of the most recent common ancestor node for a set of nodes. \n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.ismonophyl","page":"TreeOfLife.jl","title":"TreeOfLife.ismonophyl","text":"ismonophyl(tree::AbstractTree, tipset) :: Bool\n\nTest if a given set of tip nodes are monophyletic based on the tree.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.phylodiv","page":"TreeOfLife.jl","title":"TreeOfLife.phylodiv","text":"phylodiv(tree::ChronoTree, tipset; keeproot::Bool=false)\n\nCompute the phylogenetic diversity (PD) of a given set of tips of the tree,  i.e., the sum of branch lengths of the subtree generated from the set. \n\nThe argument keeproot controls whether the original root node needs to be  contained in the subtree; by default it is set to false.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.cutfromroot","page":"TreeOfLife.jl","title":"TreeOfLife.cutfromroot","text":"cutfromroot(tree::ChronoTree, dist::Real; keep::Symbol=:both)\n\t:: Union{Vector{NTuple{2,Int}}, Vector{Int}}\n\nFind the temporal section by dist time units after the root is born.  The argument keep can be set among three options, i.e., :both (tuples  containing parents and childs), :parent, and :child. \n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.cutfromtips","page":"TreeOfLife.jl","title":"TreeOfLife.cutfromtips","text":"cutfromtips(tree::ChronoTree, dist::Real; keep::Symbol=:both)\n\t:: Union{Vector{NTuple{2,Int}}, Vector{Int}}\n\nFind the temporal section by dist time units before the root is born. The argument keep can be set among three options, i.e., :both (tuples  containing parents and childs), :parent, and :child. \n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.isbinary","page":"TreeOfLife.jl","title":"TreeOfLife.isbinary","text":"isbinary(tree::AbstractTree) :: Bool\n\nTest if the tree is strictly binary or dichotonous, i.e., all non-tip nodes  have exactly two descendents. \n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.treehash","page":"TreeOfLife.jl","title":"TreeOfLife.treehash","text":"treehash(tree::CladoTree, h::UInt=zero(UInt)) :: UInt\ntreehash(tree::ChronoTree, h::UInt=zero(UInt)) :: UInt\n\nCompute a hash value for a phylogenetic tree so that isomorphic trees  necessarily have the same hash value (tested by isomorphic).\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.isomorphic","page":"TreeOfLife.jl","title":"TreeOfLife.isomorphic","text":"isomorphic(tree1::CladoTree, tree2::CladoTree) :: Bool\nisomorphic(tree1::ChronoTree, tree2::ChronoTree) :: Bool\n\nTest if two trees are isomorphic. \n\nWhen both phylogenetic tree are dated, the isomorphism implies that branch  lengths are correspondingly equal; otherwise, only the tree topology are  compared.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.getdescs","page":"TreeOfLife.jl","title":"TreeOfLife.getdescs","text":"getdescs(tree::AbstractTree, mrca::Int) :: Vector{Int}\n\nFind the indices of all tip descendents from a common ancestor node.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.getdescnames","page":"TreeOfLife.jl","title":"TreeOfLife.getdescnames","text":"getdescnames(tree::AbstractTree, mrca::Int) :: Vector{String}\ngetdescnames(tree::AbstractTree) :: Vector{Vector{String}}\n\nFind the names of all tip descendents from a common ancestor node, or such  descendent name lists for all nodes of the tree.\n\n\n\n\n\n","category":"function"},{"location":"#Internal-functions-2","page":"TreeOfLife.jl","title":"Internal functions","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"TreeOfLife.calibrate_t_root!\nTreeOfLife.calibrate_t_branch!\nTreeOfLife.mean_\nTreeOfLife.preorder!\nTreeOfLife.postorder!\nTreeOfLife.get_counts\nTreeOfLife.sum_t_branch","category":"page"},{"location":"#TreeOfLife.calibrate_t_root!","page":"TreeOfLife.jl","title":"TreeOfLife.calibrate_t_root!","text":"calibrate_t_root!(tree::ChronoTree) :: ChronoTree\ncalibrate_t_root!(tree::AbstractTree) :: AbstractTree\n\nCalculate all t_root values according to t_branch values. Used in  fromnewick.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.calibrate_t_branch!","page":"TreeOfLife.jl","title":"TreeOfLife.calibrate_t_branch!","text":"calibrate_t_branch!(tree::ChronoTree) :: ChronoTree\ncalibrate_t_branch!(tree::AbstractTree) :: AbstractTree\n\nCalibrate all t_root values of nodes of the tree so that the root's t_root  is zero, and then recalculate all t_branch values according to the new  t_root values. Used in subtree.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.mean_","page":"TreeOfLife.jl","title":"TreeOfLife.mean_","text":"mean_(a::Vector{Float64}) :: Float64\n\nCompute the arithmetic mean of a vector of 64-bit float numbers.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.preorder!","page":"TreeOfLife.jl","title":"TreeOfLife.preorder!","text":"preorder!(sequence, tree::AbstractTree, i=1) :: Nothing\n\nAppend the pre-order traversal sequence of the whole tree, or its subtree  with root node tree[i].\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.postorder!","page":"TreeOfLife.jl","title":"TreeOfLife.postorder!","text":"postorder!(sequence, tree::AbstractTree, i=1) :: Nothing\n\nAppend the post-order traversal sequence of the whole tree, or its subtree  with root node tree[i].\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.get_counts","page":"TreeOfLife.jl","title":"TreeOfLife.get_counts","text":"get_selected(oldtree::AbstractTree, tipset; \n\tsimplify::Bool=true, keeproot::Bool=false) :: Vector{Int}\n\nSelect nodes of a subtree generated from a given set of tips of the tree. Used  in subtree and isbinary. \n\nArguments simplify and keeproot have same meanings as in subtree. \n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.sum_t_branch","page":"TreeOfLife.jl","title":"TreeOfLife.sum_t_branch","text":"sum_t_branch(tree::ChronoTree)\n\nCompute the sum of branch lengths of the tree. Used in phylodiv. \n\n\n\n\n\n","category":"function"},{"location":"#Methods-involving-multiple-trees","page":"TreeOfLife.jl","title":"Methods involving multiple trees","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"consensus","category":"page"},{"location":"#TreeOfLife.consensus","page":"TreeOfLife.jl","title":"TreeOfLife.consensus","text":"consensus(trees::Vector{<:AbstractTree}; \n\tthreshold::Float64=0.5, every::Int=0) :: CladoTree\n\nSummarize phylogenetic trees to one such that clades with support rate no less  than a threshold remain in the consensus tree. \n\nThe argument threshold should be a number between 0.5 and 1.0; the default  value is 0.5.\n\nThe argument every, if set to a positive integer, makes the (probably long)  analyzing process print a log per every trees; the default value is 0.\n\n\n\n\n\n","category":"function"},{"location":"#Internal-functions-3","page":"TreeOfLife.jl","title":"Internal functions","text":"","category":"section"},{"location":"","page":"TreeOfLife.jl","title":"TreeOfLife.jl","text":"TreeOfLife.count_clade_ages\nTreeOfLife.count_clades\nTreeOfLife.construct_tree","category":"page"},{"location":"#TreeOfLife.count_clade_ages","page":"TreeOfLife.jl","title":"TreeOfLife.count_clade_ages","text":"count_clade_ages(trees::Vector{ChronoTree}; every::Int=0) \n\t:: Dict{Set{String}, Vector{Float64}}\n\nCount the age for every possible tip node combination as long as occured at  least once in some of the trees. \n\nThe argument every, if set to a positive integer, makes the (probably long)  analyzing process print a log per every trees; the default value is 0.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.count_clades","page":"TreeOfLife.jl","title":"TreeOfLife.count_clades","text":"count_clades(trees::Vector{<:AbstractTree}; every::Int=0)\n\t:: Dict{Set{String}, Int}\n\nCount every possible tip node combination as long as occured at least once in  some of the trees. Used in consensus.\n\nThe argument every, if set to a positive integer, makes the (probably long)  analyzing process print a log per every trees; the default value is 0.\n\n\n\n\n\n","category":"function"},{"location":"#TreeOfLife.construct_tree","page":"TreeOfLife.jl","title":"TreeOfLife.construct_tree","text":"construct_tree(parents::Vector{Int}) :: Tuple{CladoTree, Int}\n\nConstruct a cladogram from parent indices. Used in consensus.\n\n\n\n\n\n","category":"function"}]
}
